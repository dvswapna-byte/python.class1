--> Identifiers
        -- within  python name is an identify the following

        -- 1. Variables
        -- 2. Function names
        -- 3. Class names
        -- 4. Module names
        -- 5. Object names
        -- 6. Methods
        -- 7. Packages
        -- 8. Constants
        -- 9. Attributes
        -- 10. Parameters

        -- Rules for writing identifiers

        -- 1. An identifier can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or 
              digits (0 to 9) or an underscore (_)
        -- 2. An identifier cannot start with a digit. 1variable is invalid, variable1 is valid
        -- 3. Keywords cannot be used as identifiers
        -- 4. Identifiers are case sensitive. myvariable and myVariable are different
        -- 5. An identifier can be of any length
        -- 6. You cannot use special characters like !, @, #, $, % etc. in identifiers. Only underscore (_) is allowed
        -- 7. You cannot use spaces in identifiers. Use underscore (_) to separate words in an identifier
        -- 8. You cannot use reserved words (keywords) as identifiers

     data = "hello"
     2daydate = "hello"  -- invalid
        day2date = "hello"  -- valid
        day_2_date = "hello"  -- valid

        #Define students data 
        # Bad way of using Identifiers 
        x= "ravi"
        y ="25"
        z = "python course"

        # Good way of using Identifiers
        student_name = "
        student_age = 25
        student_course = "python course" ravi"

        SO NAME THE IDENTIFIERS APPROPRIATELY

    # Why python
    -- 1. Easy to learn and use  SYNTAX, EXECUTION, LANGUAGE IS SIMPLE
    -- 2. Free and open source
    -- 3. Portable
    -- 4. Interpreted language PERFORMANCE
                complied language is faster than interpreted language

    -- 5. vast libraries
    -- 6. Object oriented
    -- 7. Extensible
    -- 8. Dynamically typed
    --    -- Dynamically typed means you don't have to declare the data type of a variable when you create one.
    --    -- The interpreter infers the type of the variable at runtime based on the value
    --    -- assigned to it. For example, if you assign an integer value to a variable, Python treats it as an integer.
    --    -- If you later assign a string value to the same variable, Python treats it as a string.
    -- 9. High level language
    -- 10. Large community support

    NOTE:- TO DEVELOP AN APPLICATION WITHIN A SHORT SPAM OF TIME TO SOLVE THE PROBLEM OF A CLIENT. PYTHON DEVELOPMENT 
    -- IS THE BEST OPTION. IT IS NOT USED FOR DEVELOPING HIGH PERFORMANCE APPLICATIONS LIKE GAMES, GRAPHICS, ETC.






-> Functional Programming

    -> Functions : A function is block of code, which performs some task

    -> Why Functions ?

        -> Functions can help you break down complex problems into simpler and smaller manageable sub tasks  

        -> You can call a function multiple times, which avoids code Repetition, eventually 
            helps in code REUSABILITY 

    
    -> Syntax : 

        def function_name():
            Statements
    
    -> Functions with parameters 

        -> Using parameters with functions we can pass dynamic input for doing tasks

        def function_name(param 1, param 2, ...):
            Statements
    
    -> Function Types : Based on the arguments we pass, we have different types of Functions

        -> Positional Argument Based 
        -> Default Argument Based 
        -> Keyword Argument Based 
        -> Arbitrary Positional Argument Based (*args)
        -> Arbitrary Keyword Argument Based (**kwargs)

    
    -> Positional Argument Based 

        -> The passed argument to the function, should be in the exact order defined inside the function signature

        -> Here based on positions functionality will change 

    -> Default Argument Based 

        -> Passing default values as arguments to the functions

        -> Once we start adding default arguments, the next consecutive arguments should be default only 

25th Sep 2025
=============

    -> Keyword Argument Based

        -> Arguments will be passed explicitly specifying the name, so function call is 
            based on the name of the argument 

        -> Order doesn't matter 

        -> Improve code readability when you have multiple parameters

        -> Once we start adding Keyword arguments, the next consecutive arguments should be Keyword only 

    -> Arbitrary Positional Argument Based (*args)

        -> Arbitrary : unknown / random 

        -> Arbitrary Positional  will accept any number of Positional Based  Argument

    -> Arbitrary Keyword Argument Based (**kwargs)

        -> Arbitrary : unknown / random 

        -> Arbitrary Keyword  will accept any number of Keyword Based  Argument

26th Sep 2025
=============

    -> "return" is a keyword in python, used in functions to give appropriate 
        response, when the function is called

    -> If we are using return make sure it is the last statement to be executed

    -> Function Composition 

        -> Function calling another function is called Function Composition, its for REUSABILITY

    -> Scope Of Variables Within Functions

        -> Scope : Where inside the code, a variable can be used or not

            -> Local Scope 

                -> A local variable is declared inside a function
                -> it only exists while the function runs
                -> we cannot use them outside the function

            -> Global Scope 

                -> A Global variable is declared outside the function
                -> it exists outside the function call as well
                -> it can be used anywhere in code, inside or outside the functions
                -> Global variable are read only by default
                -> As global variables can be accessed inside the functions, there can be
                name conflicts, in that case local variables get first preference  
                    -> if name conflict is there, and still want to give first preference to
                        global then we use globals()
                -> If you want global variable to changed inside the function, then we
                    need to use a special keywords called global 
    